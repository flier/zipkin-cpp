FROM ubuntu:xenial

RUN apt-get update && apt-get install -y --no-install-recommends \
    autoconf \
    automake \
    binutils-dev \
    bison \
    build-essential \
    ca-certificates \
    doxygen \
    flex \
    git \
    libboost-all-dev \
    libc++-dev \
    libcurl4-openssl-dev \
    libdouble-conversion-dev \
    libdwarf-dev \
    libelf-dev \
    libevent-dev \
    libgflags-dev \
    libgoogle-glog-dev \
    libiberty-dev \
    libjemalloc-dev \
    liblz4-dev \
    liblzma-dev \
    libsnappy-dev \
    libssl-dev \
    libtool \
    libunwind8-dev \
    make \
    pkg-config \
    thrift-compiler \
    tree \
    wget \
    zlib1g-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV CMAKE_DIR   /cmake
ENV SRC_DIR     /source
ENV DIST_DIR    /dist
ENV BUILD_DIR   /build
ENV EXT_DIR     $BUILD_DIR/externals

ENV CMAKE_VERSION   3.8.2
RUN wget https://cmake.org/files/v3.8/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz && \
    mkdir -p $CMAKE_DIR && \
    tar xzvf cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz -C $CMAKE_DIR --strip-components=1 && \
    rm cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz

ENV FOLLY_VERSION   2017.12.18.00
RUN wget https://github.com/facebook/folly/archive/v$FOLLY_VERSION.tar.gz -O folly-$FOLLY_VERSION.tar.gz && \
    mkdir -p $EXT_DIR/src/Folly && \
    tar xzvf folly-$FOLLY_VERSION.tar.gz -C $EXT_DIR/src/Folly --strip-components=1 && \
    rm folly-$FOLLY_VERSION.tar.gz && \
    cd $EXT_DIR/src/Folly/folly && \
    autoreconf -vi && \
    ./configure \
    --prefix=$EXT_DIR \
    --with-pic \
    LD_LIBRARY_PATH=$EXT_DIR/lib \
    LD_RUN_PATH=$EXT_DIR/lib \
    LIBRARY_PATH=$EXT_DIR/lib \
    LDFLAGS=-L$EXT_DIR/lib \
    PKG_CONFIG_PATH=$EXT_DIR/lib/pkgconfig \
    CFLAGS=-I$EXT_DIR/include \
    CXXFLAGS=-I$EXT_DIR/include \
    CPPFLAGS=-I$EXT_DIR/include && \
    make && \
    make install && \
    make clean && \
    rm -rf $EXT_DIR/src/Folly/folly

ENV THRIFT_VERSION_STRING   0.11.0
RUN wget http://www-us.apache.org/dist/thrift/$THRIFT_VERSION_STRING/thrift-$THRIFT_VERSION_STRING.tar.gz && \
    mkdir -p $EXT_DIR/src/Thrift && \
    tar xzvf thrift-$THRIFT_VERSION_STRING.tar.gz -C $EXT_DIR/src/Thrift --strip-components=1 && \
    rm thrift-$THRIFT_VERSION_STRING.tar.gz && \
    cd $EXT_DIR/src/Thrift && \
    ./configure \
    --prefix=$EXT_DIR \
    --without-c_glib \
    --without-csharp \
    --without-dart \
    --without-dotnetcore \
    --without-erlang \
    --without-go \
    --without-java \
    --without-lua \
    --without-nodejs \
    --without-php \
    --without-py3 \
    --without-python \
    --without-qt4 \
    --without-qt5 \
    --without-rs \
    --without-ruby \
    --disable-plugin && \
    make && \
    make install && \
    make clean && \
    rm -rf $EXT_DIR/src/Thrift

ENV LibRDKafka_VERSION      0.11.3
RUN wget https://github.com/edenhill/librdkafka/archive/v$LibRDKafka_VERSION.tar.gz -O LibRDKafka-$LibRDKafka_VERSION.tar.gz && \
    mkdir -p $EXT_DIR/src/LibRDKafka/build && \
    tar xzvf LibRDKafka-$LibRDKafka_VERSION.tar.gz -C $EXT_DIR/src/LibRDKafka --strip-components=1 && \
    rm LibRDKafka-$LibRDKafka_VERSION.tar.gz && \
    cd $EXT_DIR/src/LibRDKafka/build && \
    $CMAKE_DIR/bin/cmake \
    -DRDKAFKA_BUILD_EXAMPLES=OFF \
    -DRDKAFKA_BUILD_TESTS=OFF \
    -DCMAKE_INSTALL_PREFIX=$EXT_DIR \
    -DCMAKE_PREFIX_PATH=$EXT_DIR \
    $EXT_DIR/src/LibRDKafka/ && \
    make && \
    make install && \
    make clean && \
    rm -rf $EXT_DIR/src/LibRDKafka

ENV RAPIDJSON_VERSION   1.1.0
RUN wget https://github.com/miloyip/rapidjson/archive/v$RAPIDJSON_VERSION.tar.gz -O RapidJSON-$RAPIDJSON_VERSION.tar.gz && \
    mkdir -p $EXT_DIR/src/RapidJSON/build && \
    tar xzvf RapidJSON-$RAPIDJSON_VERSION.tar.gz -C $EXT_DIR/src/RapidJSON --strip-components=1 && \
    rm RapidJSON-$RAPIDJSON_VERSION.tar.gz && \
    cd $EXT_DIR/src/RapidJSON/build && \
    $CMAKE_DIR/bin/cmake \
    -DCMAKE_INSTALL_PREFIX=$EXT_DIR \
    -DCMAKE_PREFIX_PATH=$EXT_DIR \
    -DRAPIDJSON_BUILD_DOC=OFF \
    -DRAPIDJSON_BUILD_EXAMPLES=OFF \
    -DRAPIDJSON_BUILD_TESTS=OFF \
    $EXT_DIR/src/RapidJSON/ && \
    make && \
    make install && \
    make clean && \
    rm -rf $EXT_DIR/src/RapidJSON

ENV GTEST_VERSION   1.8.0
RUN wget https://github.com/google/googletest/archive/release-$GTEST_VERSION.tar.gz -O GTest-$GTEST_VERSION.tar.gz && \
    mkdir -p $EXT_DIR/src/GTest/build && \
    tar xzvf GTest-$GTEST_VERSION.tar.gz -C $EXT_DIR/src/GTest --strip-components=1 && \
    rm GTest-$GTEST_VERSION.tar.gz && \
    cd $EXT_DIR/src/GTest/build && \
    $CMAKE_DIR/bin/cmake \
    -DCMAKE_INSTALL_PREFIX=$EXT_DIR \
    -DCMAKE_PREFIX_PATH=$EXT_DIR \
    $EXT_DIR/src/GTest/ && \
    make && \
    make install && \
    make clean && \
    rm -rf $EXT_DIR/src/GTest

ENV GBENCH_VERSION  1.1.0
RUN wget https://github.com/google/benchmark/archive/v$GBENCH_VERSION.tar.gz -O GBench-$GBENCH_VERSION.tar.gz && \
    mkdir -p $EXT_DIR/src/GBench/build && \
    tar xzvf GBench-$GBENCH_VERSION.tar.gz -C $EXT_DIR/src/GBench --strip-components=1 && \
    rm GBench-$GBENCH_VERSION.tar.gz && \
    cd $EXT_DIR/src/GBench/build && \
    $CMAKE_DIR/bin/cmake \
    -DCMAKE_INSTALL_PREFIX=$EXT_DIR \
    -DCMAKE_PREFIX_PATH=$EXT_DIR \
    -DBENCHMARK_ENABLE_TESTING=OFF \
    -DBENCHMARK_ENABLE_LTO=ON \
    $EXT_DIR/src/GBench/ && \
    make && \
    make install && \
    make clean && \
    rm -rf $EXT_DIR/src/GBench

ENV ZIPKIN_VERSION  0.3.1

COPY ./docker-entrypoint.sh  /

ENTRYPOINT ["/docker-entrypoint.sh"]

CMD ["release"]
